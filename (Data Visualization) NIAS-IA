{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1Ao6-7G2S9hnbkRrEhsNlF5up5K3W590M","authorship_tag":"ABX9TyM3XygiLfbjaAQxfzV9kmFA"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":30,"metadata":{"id":"wZRhSrI2qot3","colab":{"base_uri":"https://localhost:8080/","height":451},"executionInfo":{"status":"ok","timestamp":1741459583822,"user_tz":180,"elapsed":207,"user":{"displayName":"Omar VÃ­tor Santana","userId":"16826164520525415406"}},"outputId":"d101acab-e0ca-4473-b698-a76dfd2f51b3"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","#x = 'covid_19_clean_complete_new.csv'\n","#y = pd.read_csv(x)\n","#df = pd.DataFrame(y)\n","#5.1.1\n","#df_a = df[df['WHO Region'] == 'Americas']\n","#df_e = df[df['WHO Region'] == 'Europe']\n","#df_m = df[df['WHO Region']== 'Eastern Mediterranean']\n","#df_grouped_a = df_a.groupby('Date')['Deaths'].sum()\n","#df_grouped_e = df_e.groupby('Date')['Deaths'].sum()\n","#df_grouped_m = df_m.groupby('Date')['Deaths'].sum()\n","#plt.plot(df_grouped_a.index,df_grouped_a, label='Americas', color='black')\n","#plt.plot(df_grouped_e.index,df_grouped_e, label='Europe', color='red')\n","#plt.plot(df_grouped_m.index,df_grouped_m, label='Eastern Mediterranean', color='blue')\n","#plt.title('Deaths/Region')\n","#plt.xlabel('Date')\n","#plt.ylabel('Deaths')\n","#plt.legend(loc='best')\n","#plt.show()\n","\n","#df_grouped_a = df_a.groupby('Date')['Deaths'].sum()\n","#df_grouped_e = df_e.groupby('Date')['Deaths'].sum()\n","#df_grouped_m = df_m.groupby('Date')['Deaths'].sum()\n","#a = df_grouped_a.sum()\n","#b = df_grouped_e.sum()\n","#c = df_grouped_m.sum()\n","#if a > b:\n","  #if a > c:\n","    #print('Americas has the most deaths')\n","  #else:\n","    #print('Eastern Mediterranean has the most deaths')\n","#else:\n","  #if b > c:\n","    #print('Europe has the most deaths')\n","  #else:\n","    #print('Eastern Mediterranean has the most deaths')\n","\n","\n","#df['Date'] = pd.to_datetime(df['Date'])\n","#df_General= df[['Deaths', 'Date', 'WHO Region']]\n","#df = df_General[df['Deaths']>0]\n","#Regions = ['Americas', 'Europe','Eastern Mediterranean']\n","#df = df[df['WHO Region'].isin(Regions)]\n","#first_death = df.groupby('WHO Region').first()\n","#print(first_death)\n","\n","\n","#5.2.1\n","#Regions = ['Eastern Mediterranean', 'Europe', 'Americas','South-East Asia', 'Western Pacific', 'Africa']\n","#df = df[df['WHO Region'].isin(Regions)]\n","#df_grouped = df.groupby('WHO Region')['Deaths'].sum().reset_index()\n","#plt.figure(figsize=(10, 6))\n","#sns.barplot(x= 'WHO Region', y= 'Deaths', data= df_grouped, palette='Blues_r')\n","#plt.show()\n","\n","#df_grouped = df.groupby('WHO Region', as_index=False)['Deaths'].sum()\n","#df_grouped = df_grouped.sort_values(by='Deaths', ascending=False)\n","#df_grouped.sort_values(ascending= False).head(2)\n","#df_grouped.sort_values(by= 'WHO Region', ascending= False).tail(1)\n","\n","#5.3.1\n","z = '/content/worldometer_data.csv'\n","o = pd.read_csv(z)\n","df = pd.DataFrame(o)\n","df_grouped = df.groupby('Continent')['Deaths/1M pop'].mean()\n","                                                                                       #South America,\tEurope,\tNorth America\n","#top_3 = df_grouped.sort_values(ascending= False).head(3)\n","\n","#df_top_3 = df[df['Continent'].isin(['South America','Europe','North America'])]\n","\n","#plt.figure(figsize=(8, 5))\n","#sns.scatterplot(data=df_top_3, x='Deaths/1M pop', y='Population' , hue='Continent')\n","#plt.show()\n","\n","#5.4.1\n","#corr_df = df[['Population', 'Tests/1M pop']].corr()                            #Tests/1M pop\n","#plt.figure(figsize=(8, 5))\n","#sns.heatmap(corr_df, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)\n","#plt.show()"]}]}