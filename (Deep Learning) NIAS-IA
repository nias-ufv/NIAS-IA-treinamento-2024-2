{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNIt8XYaJDk9/EBkhSQee8J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":28,"metadata":{"id":"bkgGGn-CsVGV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741470671496,"user_tz":180,"elapsed":3806,"user":{"displayName":"Omar VÃ­tor Santana","userId":"16826164520525415406"}},"outputId":"18ff2fea-bbce-49f2-a129-73687b864d76"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-28-27b13f306d30>:79: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n","<ipython-input-28-27b13f306d30>:187: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n","/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n","<ipython-input-28-27b13f306d30>:299: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       ...,\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.]])"]},"metadata":{},"execution_count":28}],"source":["import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","#a['Pressure (millibars)'].value_counts()\n","\n","#if any(df == 'object'):\n","  #print(df.select_dtypes(include='object').columns)\n","#if any(df == 'float64'):\n"," # print(df.select_dtypes(include='float64').columns)\n","\n","\n","#df['Formatted Date'].value_counts()\n","#df['Summary'].value_counts()\n","#df['Precip Type'].value_counts()\n","#df['Daily Summary'].value_counts()\n","df['Formatted Date'] = df['Formatted Date'].str.split('+').str[0]\n","df['Formatted Date'] = pd.to_datetime(df['Formatted Date'])\n","\n","\n","df['Month'] = df['Formatted Date'].dt.month\n","df['Year'] = df['Formatted Date'].dt.year\n","df['Day'] = df['Formatted Date'].dt.day\n","df['Hour'] = df['Formatted Date'].dt.hour\n","df.drop(['Formatted Date'], axis=1, inplace=True)\n","\n","#-----------------------------------------------------------------------\n","df.drop(['Loud Cover'], axis=1, inplace=True)\n","\n","#Windy and Dry, Dangerously Windy and Partly Cloudy, Breezy and Dry\n","\n","d = df.loc[df['Summary']== 'Breezy and Dry']\n","e = df.loc[df['Summary']== 'Dangerously Windy and Partly Cloudy']\n","f = df.loc[df['Summary']== 'Windy and Dry']\n","df.drop(index= 53124, inplace=True)\n","df.drop(index= 57947, inplace=True)\n","df.drop(index= 12181, inplace=True)\n","\n","\n","from sklearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","from sklearn.model_selection import train_test_split\n","\n","df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n","#numerical_transformer = SimpleImputer(strategy='mean')\n","\n","#categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('ordinal', OrdinalEncoder(handle_unknown='use_encoded_value',unknown_value=-1))])\n","#numerical_cols = ['Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)',\t'Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']\n","#categorical_cols = ['Summary','Precip Type']\n","#preprocessor = ColumnTransformer(transformers=[('num', numerical_transformer, numerical_cols),('cat', categorical_transformer, categorical_cols)])\n","#model = RandomForestClassifier(n_estimators=100, random_state=0)\n","X = df[['Summary','Precip Type', 'Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)','Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']]\n","y = df['Daily Summary']\n","\n","#train_X, val_X, train_y, val_y = train_test_split(X, y, random_state= 0, test_size=0.3)\n","#forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6)\n","\n","#encoder = LabelEncoder()\n","#df['Daily Summary'] = encoder.fit_transform(df['Daily Summary'])\n","\n","#my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n","#my_pipeline.fit(train_X, train_y)\n","\n","#preds = my_pipeline.predict(val_X)\n","#----------------------------------------------------------\n","#X.shape\n","#y.unique()\n","\n","\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","#a['Pressure (millibars)'].value_counts()\n","\n","#if any(df == 'object'):\n","  #print(df.select_dtypes(include='object').columns)\n","#if any(df == 'float64'):\n"," # print(df.select_dtypes(include='float64').columns)\n","\n","\n","#df['Formatted Date'].value_counts()\n","#df['Summary'].value_counts()\n","#df['Precip Type'].value_counts()\n","#df['Daily Summary'].value_counts()\n","df['Formatted Date'] = df['Formatted Date'].str.split('+').str[0]\n","df['Formatted Date'] = pd.to_datetime(df['Formatted Date'])\n","\n","\n","df['Month'] = df['Formatted Date'].dt.month\n","df['Year'] = df['Formatted Date'].dt.year\n","df['Day'] = df['Formatted Date'].dt.day\n","df['Hour'] = df['Formatted Date'].dt.hour\n","df.drop(['Formatted Date'], axis=1, inplace=True)\n","\n","#-----------------------------------------------------------------------\n","df.drop(['Loud Cover'], axis=1, inplace=True)\n","\n","#Windy and Dry, Dangerously Windy and Partly Cloudy, Breezy and Dry\n","\n","d = df.loc[df['Summary']== 'Breezy and Dry']\n","e = df.loc[df['Summary']== 'Dangerously Windy and Partly Cloudy']\n","f = df.loc[df['Summary']== 'Windy and Dry']\n","df.drop(index= 53124, inplace=True)\n","df.drop(index= 57947, inplace=True)\n","df.drop(index= 12181, inplace=True)\n","\n","\n","from sklearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","from sklearn.model_selection import train_test_split\n","\n","df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n","#numerical_transformer = SimpleImputer(strategy='mean')\n","\n","#categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('ordinal', OrdinalEncoder(handle_unknown='use_encoded_value',unknown_value=-1))])\n","#numerical_cols = ['Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)',\t'Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']\n","#categorical_cols = ['Summary','Precip Type']\n","#preprocessor = ColumnTransformer(transformers=[('num', numerical_transformer, numerical_cols),('cat', categorical_transformer, categorical_cols)])\n","#model = RandomForestClassifier(n_estimators=100, random_state=0)\n","X = df[['Summary','Precip Type', 'Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)','Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']]\n","y = df['Daily Summary']\n","\n","#train_X, val_X, train_y, val_y = train_test_split(X, y, random_state= 0, test_size=0.3)\n","#forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6)\n","\n","#encoder = LabelEncoder()\n","#df['Daily Summary'] = encoder.fit_transform(df['Daily Summary'])\n","\n","#my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n","#my_pipeline.fit(train_X, train_y)\n","\n","#preds = my_pipeline.predict(val_X)\n","#----------------------------------------------------------\n","#X.shape\n","#y.unique()\n","\n","\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","\n","\n","\n","model = keras.Sequential([layers.Dense(units=256, activation='relu', input_shape=[13]), layers.BatchNormalization(),layers.Dropout(0.3),\n","layers.Dense(units=256, activation='relu'), layers.BatchNormalization(),layers.Dropout(0.3),\n","layers.Dense(units=256, activation='relu'), layers.BatchNormalization(),layers.Dropout(0.3),\n","layers.Dense(units=1, activation='softmax')])\n","import seaborn as sns\n","import numpy as np\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import seaborn as sns\n","x = '/content/weatherHistory.csv'\n","readx = pd.read_csv(x)\n","df = pd.DataFrame(readx)\n","\n","\n","\n","#df.isnull().sum()\n","#df.describe()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df, bins=50, kde=False)\n","#plt.show()\n","\n","#a = df.loc[df['Pressure (millibars)']<100]\n","#a['Pressure (millibars)'].value_counts()\n","\n","#if any(df == 'object'):\n","  #print(df.select_dtypes(include='object').columns)\n","#if any(df == 'float64'):\n"," # print(df.select_dtypes(include='float64').columns)\n","\n","\n","#df['Formatted Date'].value_counts()\n","#df['Summary'].value_counts()\n","#df['Precip Type'].value_counts()\n","#df['Daily Summary'].value_counts()\n","df['Formatted Date'] = df['Formatted Date'].str.split('+').str[0]\n","df['Formatted Date'] = pd.to_datetime(df['Formatted Date'])\n","\n","\n","df['Month'] = df['Formatted Date'].dt.month\n","df['Year'] = df['Formatted Date'].dt.year\n","df['Day'] = df['Formatted Date'].dt.day\n","df['Hour'] = df['Formatted Date'].dt.hour\n","df.drop(['Formatted Date'], axis=1, inplace=True)\n","\n","#-----------------------------------------------------------------------\n","df.drop(['Loud Cover'], axis=1, inplace=True)\n","\n","#Windy and Dry, Dangerously Windy and Partly Cloudy, Breezy and Dry\n","\n","d = df.loc[df['Summary']== 'Breezy and Dry']\n","e = df.loc[df['Summary']== 'Dangerously Windy and Partly Cloudy']\n","f = df.loc[df['Summary']== 'Windy and Dry']\n","df.drop(index= 53124, inplace=True)\n","df.drop(index= 57947, inplace=True)\n","df.drop(index= 12181, inplace=True)\n","\n","\n","from sklearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.preprocessing import OrdinalEncoder, LabelEncoder\n","from sklearn.model_selection import train_test_split\n","\n","df[\"Pressure (millibars)\"].replace(0, np.nan, inplace=True)\n","#numerical_transformer = SimpleImputer(strategy='mean')\n","\n","#categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('ordinal', OrdinalEncoder(handle_unknown='use_encoded_value',unknown_value=-1))])\n","#numerical_cols = ['Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)',\t'Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']\n","#categorical_cols = ['Summary','Precip Type']\n","#preprocessor = ColumnTransformer(transformers=[('num', numerical_transformer, numerical_cols),('cat', categorical_transformer, categorical_cols)])\n","#model = RandomForestClassifier(n_estimators=100, random_state=0)\n","X = df[['Summary','Precip Type', 'Temperature (C)','Apparent Temperature (C)','Humidity','Wind Speed (km/h)','Wind Bearing (degrees)','Visibility (km)','Pressure (millibars)','Month',\t'Year',\t'Day','Hour']]\n","y = df['Daily Summary']\n","\n","train_X, val_X, train_y, val_y = train_test_split(X, y, random_state= 0, test_size=0.3)\n","forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6)\n","\n","encoder = LabelEncoder()\n","df['Daily Summary'] = encoder.fit_transform(df['Daily Summary'])\n","train_y = encoder.fit_transform(train_y)\n","val_y = encoder.transform(val_y)\n","\n","#my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n","#my_pipeline.fit(train_X, train_y)\n","\n","#preds = my_pipeline.predict(val_X)\n","#----------------------------------------------------------\n","#X.shape\n","#y.shape\n","\n","\n","from tensorflow import keras\n","from tensorflow.keras import layers\n","\n","#model = keras.Sequential([layers.Dense(units=256, activation='relu', input_shape=[13]), layers.BatchNormalization(),layers.Dropout(0.3),\n","#layers.Dense(units=256, activation='relu'), layers.BatchNormalization(),layers.Dropout(0.3),\n","#layers.Dense(units=256, activation='relu'), layers.BatchNormalization(),layers.Dropout(0.3),\n","#layers.Dense(units=13, activation='softmax')])\n","\n","from tensorflow.keras.utils import to_categorical\n","\n","y_train_one_hot = to_categorical(train_y, num_classes=96450)\n","y_val_one_hot = to_categorical(val_y, num_classes=96450)\n","\n"]}]}