{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNL9whfHcWf+7rAbTiehzbe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":6,"metadata":{"id":"tWwNYupp7leY","executionInfo":{"status":"ok","timestamp":1740893288807,"user_tz":180,"elapsed":370,"user":{"displayName":"Omar Vítor Santana","userId":"16826164520525415406"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","%matplotlib inline\n","np.random.seed(0)\n","A = '/content/test.csv'\n","B = '/content/train.csv'\n","oneA = pd.read_csv(A)\n","oneB = pd.read_csv(B)\n","df_A = pd.DataFrame(oneA)\n","df_B = pd.DataFrame(oneB)\n","\n","df_A.describe()\n","df_B.describe()\n","df_summary = pd.concat([df_A.describe(), df_B.describe()], axis=1)\n","#df_A.info()\n","#df_B.info()\n","#df_summary_new = pd.concat([df_A.info(), df_B.info()], axis=1)\n","a1 = df_A.select_dtypes(include='object').columns\n","a2 = df_A.select_dtypes(include='int64').columns\n","a3 = df_A.select_dtypes(include='float64').columns\n","#if any(a1) == True:\n","  #print('Categóricas:', a1)\n","#if any(a2) == True:\n"," #print('Discretas:', a2)\n","#if any(a3) == True:\n","  #print('Continuas:', a3)\n","\n","b1 = df_B.select_dtypes(include='object').columns\n","b2 = df_B.select_dtypes(include='int64').columns\n","b3 = df_B.select_dtypes(include='float64').columns\n","#if any(b1) == True:\n","  #print('Categóricas:', b1)\n","#if any(b2) == True:\n"," #print('Discretas:', b2)\n","#if any(b3) == True:\n","  #print('Continuas:', b3)\n","\n","#a2 = df_A.isnull().sum()\n","#b2 = df_B.isnull().sum()\n","#if any(a2) == True:\n"," # print(a2[a2 > 0].index)\n","#if any(b2) == True:\n"," # print(b2[b2>0].index)\n","\n","df_A_New = df_A.drop(['Name', 'Sex', 'Ticket', 'Cabin','Embarked'], axis=1)\n","df_B_New = df_B.drop(['Name', 'Sex', 'Ticket', 'Cabin','Embarked'], axis=1)\n","k = df_A_New.fillna(0)\n","f = df_B_New.dropna()\n","g = f.fillna(0)\n","#list_group = ['(0-10)','(10-20)','(20-30)','(30-40)','(40-50)','(50-60)','(60-70)','(70-80)']\n","#bins = (0,10,20,30,40,50,60,70,80)\n","#g['Age Grouped'] = pd.cut(g['Age'], bins= bins, right=True, labels= list_group, include_lowest=False, ordered=True)\n","\n","#plt.figure(figsize= (10, 6))\n","#sns.barplot(x = 'Survived', y= 'Age Grouped', data= g, palette='pastel')\n","#plt.show()\n","\n","\n","#'PassengerId', 'Survived', 'Pclass', 'SibSp', 'Parch'\n","\n","\n","#list_group_two = ['(0-100)','(100-200)','(200-300)','(300-400)','(400-500)','(500-600)','(600-700)','(700-800)']\n","#bins = (0,100,200,300,400,500,600,700,800)\n","#g['IdPassenger Grouped'] = pd.cut(g['PassengerId'], bins=bins, right = True, labels=list_group_two, include_lowest=False,ordered=True)\n","#plt.figure(figsize= (8, 5))\n","#sns.barplot(x= 'Survived', y= 'PassengerId',data= g, palette='pastel')\n","#plt.show()\n","\n","#plt.figure(figsize= (8, 5))\n","#sns.barplot(x= 'Pclass', y= 'Survived', data= g, palette='pastel')\n","#plt.show()\n","\n","#plt.figure(figsize= (8, 5))\n","#sns.barplot(x= 'SibSp', y= 'Survived', data= g, palette='pastel')\n","#plt.show()\n","\n","#plt.figure(figsize=(8, 5))\n","#sns.barplot(x= 'Parch', y='Survived', data=g, palette='pastel')\n","#plt.show()\n","\n","\n","#------------------------------------------------------------------------------------------------------------------------------------------\n","df_g = g.drop(['PassengerId'], axis=1)\n","X = df_g[['Pclass', 'Age', 'SibSp','Parch','Fare']] #escolhendo as features\n","y = df_g.Survived  #escolhendo o target\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","\n","train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 0, test_size=0.2) #separando o modelo em 80% de validacao e 20% teste\n","forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6) #criar variavel para o modelo treinar e fazer previsoes com base nos dados de treinamento\n","forest_model.fit(train_X, train_y) #fazendo o treinamento com base no modelo\n","#df_g_predictions = forest_model.predict(val_X) #previsoes do treinamento\n","#train = treina\n","#val = ver como ta saindo o modelo de treino\n","#accuracy = accuracy_score(val_y, df_g_predictions) #conferindo as previsoes com a realidade\n","#print(f'Acurácia da previsão: {accuracy}')\n","\n","\n","#------------------------------------------------------------------------------------------------------------------------------------------\n","df_k = k.drop(['PassengerId'], axis=1)\n","X_new = df_k[['Pclass', 'Age', 'SibSp', 'Parch', 'Fare']]\n","\n","prediction =  forest_model.predict(X_new)\n","prediction\n","last_df = pd.DataFrame({'PassengerId': df_A_New.PassengerId , 'Survived': prediction})\n","last_df.to_csv('submission.csv', index=False)\n"]}]}