{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMgGjHZmd4SeEQMWH5tEIfE"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eraVoTzOTDYs","executionInfo":{"status":"ok","timestamp":1741465937927,"user_tz":180,"elapsed":1803,"user":{"displayName":"Omar Vítor Santana","userId":"16826164520525415406"}},"outputId":"932209fd-19f8-4c50-972b-1584b0c336e2"},"outputs":[{"output_type":"stream","name":"stdout","text":["Acurácia da previsão: 0.8268156424581006\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1,\n","       0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n","       1, 0, 1, 1, 1, 0, 1, 0, 0, 1, 1, 1, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0,\n","       1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,\n","       0, 1, 1, 0, 1, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 0,\n","       1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0,\n","       1, 0, 1])"]},"metadata":{},"execution_count":2}],"source":["import pandas as pd\n","import numpy as np\n","np.random.seed(0)\n","A = '/content/test.csv'\n","B = '/content/train.csv'\n","readA = pd.read_csv(A)\n","readB = pd.read_csv(B)\n","df_A = pd.DataFrame(readA)\n","df_B = pd.DataFrame(readB)\n","\n","#df_A.info()\n","#df_B.info()\n","\n","a_category = df_A.select_dtypes(include='object').columns\n","a_numerical = df_A.select_dtypes(include=['float64','int64']).columns\n","\n","b_category = df_B.select_dtypes(include='object').columns\n","b_numerical = df_B.select_dtypes(include= ['float64', 'int64']).columns\n","\n","#if any(a_category) == True:\n"," # print('Category_A:', a_category) #Category_A: Index(['Name', 'Sex', 'Ticket', 'Cabin', 'Embarked']\n","#if any(a_numerical) == True:\n"," #print('Numerical_A:', a_numerical)\n","\n","#if any(b_category) == True:\n"," # print('Category_B:', b_category)\n","#if any(b_numerical) == True:\n"," #print('Numerical_B:', b_numerical)\n","#------------------------------------------------------------------------------------------\n","\n","from sklearn.preprocessing import LabelEncoder, OneHotEncoder\n","\n","#df_A\n","\n","encoder = LabelEncoder()\n","organization = ['Ticket','Cabin', 'Sex', 'Embarked']\n","\n","if all(col in df_A.columns for col in df_A[organization]):\n","  for col in organization:\n","    df_A[col] = encoder.fit_transform(df_A[col])\n","\n","df_A_ohe = pd.get_dummies(df_A, columns= organization)\n","\n","def one_hot_encoder(df_A, columns):\n","  df_encoded = pd.get_dummies(df_A, columns=columns)\n","  return df_encoded\n","categorical_columns = ['Sex', 'Embarked']\n","df_Atransformed = one_hot_encoder(df_A, categorical_columns)\n","\n","df_Atransformed.to_csv('df_A_newtwo.csv', index=False)\n","\n","def value_new(valor):\n","  if valor == True:\n","    return 1\n","  else:\n","    return 0\n","\n","df_Atransformed['Sex_New'] = df_Atransformed['Sex_1'].map(value_new)\n","\n","def value_new_zero(valor1):\n","  if valor1 == True:\n","    return 0\n","  else:\n","    return 0\n","\n","\n","def value_new_one(valor1):\n","  if valor1 == True:\n","    return 1\n","  else:\n","    return 0\n","\n","def value_new_two(valor1):\n","  if valor1 == True:\n","    return 2\n","  else:\n","    return 0\n","\n","df_Atransformed['New  Embarked'] = (df_Atransformed['Embarked_0'].map(value_new_zero) + df_Atransformed['Embarked_1'].map(value_new_one) + df_Atransformed['Embarked_2'].map(value_new_two))\n","df_Atransformed = df_Atransformed.drop(['Sex_0', 'Sex_1','Embarked_0', 'Embarked_1', 'Embarked_2'], axis=1)\n","\n","#---------------------------------------------------------------------------------------------------------------------------------\n","#df_B\n","\n","organization2 = ['Ticket','Cabin', 'Sex', 'Embarked']\n","\n","if all(col in df_B.columns for col in df_B[organization2]):\n","  for col in organization2:\n","    df_B[col] = encoder.fit_transform(df_B[col])\n","\n","df_B_ohe = pd.get_dummies(df_B, columns= organization2)\n","\n","def one_hot_encoder2(df_B, columns):\n","  df_encoded2 = pd.get_dummies(df_B, columns=columns)\n","  return df_encoded2\n","categorical_columns_2 = ['Sex', 'Embarked']\n","df_Btransformed = one_hot_encoder(df_B, categorical_columns_2)\n","\n","df_Btransformed.to_csv('df_B_new.csv', index=False)\n","\n","def value_newDFB(value):\n","  if value == True:\n","    return 1\n","  else:\n","    return 0\n","\n","df_Btransformed['Sex_New'] = df_Btransformed['Sex_1'].map(value_newDFB)\n","\n","def value_new_zeroDFB(value0):\n","  if value0 == True:\n","    return 0\n","  else:\n","    return 0\n","def value_new_oneDFB(value1):\n","  if value1 == True:\n","    return 1\n","  else:\n","    return 0\n","def value_new_twoDFB(value2):\n","  if value2 == True:\n","    return 2\n","  else:\n","    return 0\n","def value_new_threeDFB(value3):\n","  if value3 == True:\n","    return 3\n","  else:\n","    return 0\n","df_Btransformed['New  Embarked'] = (df_Btransformed['Embarked_0'].map(value_new_zeroDFB) + df_Btransformed['Embarked_1'].map(value_new_oneDFB) + df_Btransformed['Embarked_2'].map(value_new_twoDFB)+ df_Btransformed['Embarked_3'].map(value_new_threeDFB))\n","df_Btransformed = df_Btransformed.drop(['Sex_0', 'Sex_1','Embarked_0', 'Embarked_1', 'Embarked_2','Embarked_3'], axis=1)\n","#----------------------------------------------------------------------------------------------------------------------------------------\n","#training\n","\n","df_Btransformed = df_Btransformed.drop(['PassengerId'], axis=1)\n","X = df_Btransformed[['Pclass', 'SibSp', 'Parch','Age','Fare','Sex_New','New  Embarked']]\n","y = df_Btransformed.Survived\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","train_X, val_X, train_y, val_y = train_test_split(X, y, random_state= 0, test_size=0.2)\n","forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6)\n","forest_model.fit(train_X, train_y)\n","df_B_predictions = forest_model.predict(val_X)\n","\n","accuracy = accuracy_score(val_y, df_B_predictions)\n","print(f'Acurácia da previsão: {accuracy}')\n","df_Btransformed.to_csv('df_B.csv', index=False)\n","#------------------------------------------------------------------------------------------------------------------------------\n","C = '/content/df_B.csv'\n","readC = pd.read_csv(C)\n","df_C = pd.DataFrame(readC)\n","\n","if any(df_C['New  Embarked']== 3):\n","  df_C['New  Embarked'] = df_C['New  Embarked'].replace(3,np.nan)\n","\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.impute import SimpleImputer\n","\n","numerical_transformer = SimpleImputer(strategy='constant')\n","\n","categorical_transformer = Pipeline(steps=[('imputer', SimpleImputer(strategy='most_frequent')),('onehot', OneHotEncoder(handle_unknown='ignore'))])\n","numerical_cols = ['Pclass', 'SibSp', 'Parch', 'Age', 'Fare','Sex_New']\n","categorical_cols = ['New  Embarked']\n","preprocessor = ColumnTransformer(transformers=[('num', numerical_transformer, numerical_cols),('cat', categorical_transformer, categorical_cols)])\n","model = RandomForestClassifier(n_estimators=100, random_state=0)\n","\n","my_pipeline = Pipeline(steps=[('preprocessor', preprocessor),('model', model)])\n","my_pipeline.fit(train_X, train_y)\n","\n","preds = my_pipeline.predict(val_X)\n","preds\n","\n","#----------------------------------------------------------------------------------------------------\n","#from sklearn.model_selection import cross_val_score\n","\n","\n","\n","#my_pipeline = Pipeline(steps=[('preprocessor', SimpleImputer()),('model', RandomForestClassifier(n_estimators=50,random_state=0))])\n","#scores = cross_val_score(my_pipeline, X, y,cv=5)\n","\n","#print('Acurácia em cada fold: ', scores)\n","#print('Acurácia média: ', scores.mean())\n","#-----------------------------------------------------------------------------------------------------\n","\n","#from xgboost import XGBClassifier\n","#my_model = XGBClassifier(n_estimators = 100 , random_state= 0)\n","#my_model.fit(train_X, train_y)\n","\n","#scores = cross_val_score(my_model, X, y,cv=5)\n","#scores2 = cross_val_score(model, X, y,cv=5)\n","\n","#print('Acurácia em cada fold XGBC: ', scores)\n","#print('Acurácia média XGBC: ', scores.mean())\n","\n","#print('Acurácia em cada fold RandomForest: ', scores2)\n","#print('Acurácia média RandomForest: ', scores2.mean())"]}]}