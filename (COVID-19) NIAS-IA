{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"mount_file_id":"1K3SnJOYU-aDu2m0rNNEmPZg93F-JqnLi","authorship_tag":"ABX9TyMo89aMq9mR8pHTuymnROpe"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":2421},"id":"XzPAtWN3ywHj","executionInfo":{"status":"ok","timestamp":1740357042635,"user_tz":180,"elapsed":7540,"user":{"displayName":"Omar Vítor Santana","userId":"16826164520525415406"}},"outputId":"99a616a0-d204-4b1b-99f7-0f00dce5ac1f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      Country/Region       Lat       Long        Date  Confirmed  Deaths  \\\n","0        Afghanistan  33.93911  67.709953  2020-01-22          0       0   \n","1            Albania  41.15330  20.168300  2020-01-22          0       0   \n","...              ...       ...        ...         ...        ...     ...   \n","49066     Tajikistan  38.86100  71.276100  2020-07-27       7235      60   \n","49067        Lesotho -29.61000  28.233600  2020-07-27        505      12   \n","\n","       Recovered  Active             WHO Region  \n","0              0       0  Eastern Mediterranean  \n","1              0       0                 Europe  \n","...          ...     ...                    ...  \n","49066       6028    1147                 Europe  \n","49067        128     365                 Africa  \n","\n","[49068 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-6282a67d-0451-4872-b303-c405cb8addd0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country/Region</th>\n","      <th>Lat</th>\n","      <th>Long</th>\n","      <th>Date</th>\n","      <th>Confirmed</th>\n","      <th>Deaths</th>\n","      <th>Recovered</th>\n","      <th>Active</th>\n","      <th>WHO Region</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Afghanistan</td>\n","      <td>33.93911</td>\n","      <td>67.709953</td>\n","      <td>2020-01-22</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Eastern Mediterranean</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>41.15330</td>\n","      <td>20.168300</td>\n","      <td>2020-01-22</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Europe</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>49066</th>\n","      <td>Tajikistan</td>\n","      <td>38.86100</td>\n","      <td>71.276100</td>\n","      <td>2020-07-27</td>\n","      <td>7235</td>\n","      <td>60</td>\n","      <td>6028</td>\n","      <td>1147</td>\n","      <td>Europe</td>\n","    </tr>\n","    <tr>\n","      <th>49067</th>\n","      <td>Lesotho</td>\n","      <td>-29.61000</td>\n","      <td>28.233600</td>\n","      <td>2020-07-27</td>\n","      <td>505</td>\n","      <td>12</td>\n","      <td>128</td>\n","      <td>365</td>\n","      <td>Africa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>49068 rows × 9 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6282a67d-0451-4872-b303-c405cb8addd0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6282a67d-0451-4872-b303-c405cb8addd0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6282a67d-0451-4872-b303-c405cb8addd0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ffb0b5a8-30d0-4815-857c-80410bbcb5fa\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ffb0b5a8-30d0-4815-857c-80410bbcb5fa')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ffb0b5a8-30d0-4815-857c-80410bbcb5fa button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_21bb64f5-5f02-4fcc-8f65-01201ce5efc5\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df_new_no_province')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_21bb64f5-5f02-4fcc-8f65-01201ce5efc5 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df_new_no_province');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_new_no_province","summary":"{\n  \"name\": \"df_new_no_province\",\n  \"rows\": 49068,\n  \"fields\": [\n    {\n      \"column\": \"Country/Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 261,\n        \"samples\": [\n          \"Bulgaria\",\n          \"Kyrgyzstan\",\n          \"Niger\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Lat\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24.950319826064398,\n        \"min\": -51.7963,\n        \"max\": 71.7069,\n        \"num_unique_values\": 260,\n        \"samples\": [\n          42.7339,\n          39.3999,\n          41.377491\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Long\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 70.44273974450293,\n        \"min\": -135.0,\n        \"max\": 178.065,\n        \"num_unique_values\": 261,\n        \"samples\": [\n          25.4858,\n          74.766098,\n          8.081666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Date\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 188,\n        \"samples\": [\n          \"2020-07-23\",\n          \"2020-07-02\",\n          \"2020-02-09\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Confirmed\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127300,\n        \"min\": 0,\n        \"max\": 4290259,\n        \"num_unique_values\": 10861,\n        \"samples\": [\n          17,\n          7177,\n          4621\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Deaths\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6313,\n        \"min\": 0,\n        \"max\": 148011,\n        \"num_unique_values\": 3640,\n        \"samples\": [\n          16523,\n          5206,\n          38292\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Recovered\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 54800,\n        \"min\": 0,\n        \"max\": 1846641,\n        \"num_unique_values\": 7609,\n        \"samples\": [\n          3400,\n          1661,\n          1911\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Active\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76258,\n        \"min\": -14,\n        \"max\": 2816444,\n        \"num_unique_values\": 8641,\n        \"samples\": [\n          21842,\n          1136,\n          320\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"WHO Region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 6,\n        \"samples\": [\n          \"Eastern Mediterranean\",\n          \"Europe\",\n          \"South-East Asia\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":27},{"output_type":"stream","name":"stdout","text":["Warning: total number of rows (49068) exceeds max_rows (20000). Limiting to first (20000) rows.\n","Warning: total number of rows (49068) exceeds max_rows (20000). Limiting to first (20000) rows.\n","Error: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n","Error: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n","Error: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n","Error: Runtime no longer has a reference to this dataframe, please re-run this cell and try again.\n"]}],"source":["import pandas as pd\n","x = \"/content/drive/MyDrive/NIAS/covid_19_clean_complete.csv\"\n","y = pd.read_csv(x)\n","pd.set_option('display.max_rows', 5)\n","import numpy as np\n","reviews = pd.read_csv(\"/content/drive/MyDrive/NIAS/covid_19_clean_complete.csv\", index_col=0)\n","\n","#1\n","                        #pergunta a\n","#print(y.shape)\n","                        #pergunta b\n","#print(y.columns)\n","                        #pergunta c\n","#print(y.dtypes)\n","                        #pergunta d\n","df = pd.DataFrame(y)\n","#df['Date'] = pd.to_datetime(df['Date'])\n","#print(df.dtypes.head())\n","                        #pergunta e\n","#reviews.describe()\n","                        #pergunta f\n","#-\n","                        #pergunta g\n","#df['Province/State'].value_counts(ropdna=False)\n","\n","\n","#2\n","#df_china = df[df['Country/Region']== 'China']\n","#df_china_grouped = df_china.groupby('Province/State')['Confirmed'].sum()\n","#df_china_grouped.sort_values(ascending= False).head(5)\n","                          #pergunta a\n","#print(df_china['Province/State'].unique())\n","                          #pergunta b\n","#df_china_grouped.describe()\n","                          #pergunta c\n","#columns = ['Deaths', 'Recovered', 'Active','Confirmed', 'Province/State']\n","#if all(col in df_china for col in columns):\n","  #print(df_china[columns].describe())\n","                          #pergunta d\n","#da_china = df_china[columns]\n","#da_china_grouped = da_china.groupby('Province/State').sum()\n","#da_china_grouped.sort_values(by='Confirmed', ascending=False)\n","#print(da_china_grouped)\n","                          #pergunta e\n","#col = ['WHO Region', 'Confirmed']\n","#df_WHO_Region = df[col]\n","#df_WHO_Region_grouped = df_WHO_Region.groupby('WHO Region')['Confirmed'].sum()\n","#df_WHO_Region_grouped.sort_values(ascending=False)\n","#print(df_WHO_Region_grouped.head(5))\n","\n","\n","#3\n","                          #pergunta a\n","#def covid_no_Nan(df):\n","  #if df.notna()['Province/State'] == True:\n","    #df['Country/Region'] = df['Country/Region']+ '_' + df['Province/State']\n","  #return df\n","                          #pergunta b\n","#df_new = df.copy()\n","                          #pergunta c\n","#df_new = df.apply(covid_no_Nan, axis=1)\n","                          #pergunta d\n","#df_new_no_province = df_new.drop(columns=['Province/State'])\n","#df_new_no_province\n","\n","#4\n","#z = '/content/drive/MyDrive/NIAS/WorldometeDataset.csv'\n","#k = pd.read_csv(z, encoding= 'latin1') #Deaths/1M pop\n","#dfn = pd.DataFrame(k)\n","#\\xa0 space unbreakable\n","#dfa = dfn.drop(columns=['Total Cases', 'New Cases', 'Total Deaths', 'New Deaths','Total Recovered', 'Active Cases','Serious, Critical', 'Tot\\xa0Cases/1M pop','Total Tests', 'Tests/1M pop'])\n","#dfa.sort_values(by='Deaths/1M pop', ascending=False)\n","                            #pergunta a\n","#dfn\n","                            #pergunta b\n","#dfn_data = dfn[['Country', 'Total Cases']].groupby('Country').describe()\n","#print(dfn_data)\n","                            #pergunta c\n","#df_grouped = df.groupby('Country/Region')['Confirmed'].sum()\n","#df_grouped.sort_values(ascending=False)\n","#print(df_grouped)\n","                            #pergunta d\n","#df_merged = pd.merge(df, dfn, left_on='Country/Region', right_on= 'Country', how='inner')\n","#(df_merged[['Country', 'Deaths', 'WHO Region']])\n","                            #pergunta e\n","#df_merged_grouped = df_merged.groupby('WHO Region')['Deaths'].sum()\n","#df_merged_grouped.sort_values(ascending=False)\n","                            #pergunta f\n","#df_merged['Deaths/1M continent'] = df_merged['Deaths/1M pop']*10**6\n","#df_merged\n","                            #pergunta g\n","#df_merged_only_newcolumn = df_merged.drop(columns=['Lat','Long', 'Date', 'Confirmed', 'Deaths', 'Recovered', 'Active','WHO Region', 'Deaths/1M pop','Country', 'Total Cases', 'New Cases', 'Total Deaths', 'New Deaths','Total Recovered', 'Active Cases','Serious, Critical', 'Tot\\xa0Cases/1M pop','Total Tests', 'Tests/1M pop'])\n","#df_merged_only_newcolumn_grouped = df_merged_only_newcolumn.groupby('Country/Region')['Deaths/1M continent'].sum()\n","#df_merged_only_newcolumn_grouped.sort_values(ascending=False)\n"]}]}