{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNJ92Q2dLKQSa9515/XEW1i"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":118,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-pBrnixStCBN","executionInfo":{"status":"ok","timestamp":1741400884631,"user_tz":180,"elapsed":5423,"user":{"displayName":"Omar Vítor Santana","userId":"16826164520525415406"}},"outputId":"89df5f9d-e6ed-4743-cab9-3b8a71480e40"},"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-118-ae6e2e14af74>:32: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_B['Age'].replace(np.nan, 29.7, inplace = True)\n","<ipython-input-118-ae6e2e14af74>:33: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df_B['Embarked'].replace(3,2,inplace=True)\n","<ipython-input-118-ae6e2e14af74>:107: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_B_New.drop(258, inplace= True)\n","<ipython-input-118-ae6e2e14af74>:108: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_B_New.drop(679, inplace= True)\n","<ipython-input-118-ae6e2e14af74>:109: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_B_New.drop(737, inplace= True)\n","<ipython-input-118-ae6e2e14af74>:112: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_B_New['Group_AF'] = kmeans.fit_predict(df_B_New)\n","<ipython-input-118-ae6e2e14af74>:113: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  df_B_New['Group_AF'] = df_B_New['Group_AF'].astype('category')\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/cluster/_supervised.py:59: UserWarning: Clustering metrics expects discrete values but received continuous values for label, and binary values for target\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.11/dist-packages/sklearn/metrics/cluster/_supervised.py:59: UserWarning: Clustering metrics expects discrete values but received continuous values for label, and binary values for target\n","  warnings.warn(msg, UserWarning)\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: category_encoders in /usr/local/lib/python3.11/dist-packages (2.8.0)\n","Requirement already satisfied: numpy>=1.14.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.26.4)\n","Requirement already satisfied: pandas>=1.0.5 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (2.2.2)\n","Requirement already satisfied: patsy>=0.5.1 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.0.1)\n","Requirement already satisfied: scikit-learn>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.6.1)\n","Requirement already satisfied: scipy>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (1.13.1)\n","Requirement already satisfied: statsmodels>=0.9.0 in /usr/local/lib/python3.11/dist-packages (from category_encoders) (0.14.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas>=1.0.5->category_encoders) (2025.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.6.0->category_encoders) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=1.6.0->category_encoders) (3.5.0)\n","Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.11/dist-packages (from statsmodels>=0.9.0->category_encoders) (24.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas>=1.0.5->category_encoders) (1.17.0)\n","Acurácia da previsão: 0.8268156424581006\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","np.random.seed(0)\n","\n","A = '/content/test.csv'\n","B = '/content/train.csv'\n","readA = pd.read_csv(A)\n","readB = pd.read_csv(B)\n","df_A = pd.DataFrame(readA)\n","df_B = pd.DataFrame(readB)\n","\n","#df_A = test\n","#df_B = train\n","\n","#df_B.dtypes\n","#target = 'Survived'\n","feature_float64 = ['Age','Fare']\n","feature_int64 = ['PassengerId', 'Survived','Pclass','SibSp','Parch']\n","feature_object = ['Sex','Embarked']\n","\n","organization = ['Sex','Embarked']\n","from sklearn.preprocessing import OneHotEncoder, LabelEncoder\n","\n","encoder = LabelEncoder()\n","if all(col in df_B.columns for col in df_B[organization]):\n","  for col in feature_object:\n","    df_B[col] = encoder.fit_transform(df_B[col])\n","#mean()Age == 29.7\n","#mode()Embarked == 2\n","df_B['Age'].replace(np.nan, 29.7, inplace = True)\n","df_B['Embarked'].replace(3,2,inplace=True)\n","df_B.drop(['Cabin'], axis=1, inplace=True)\n","\n","X = df_B[['Sex' ,'Age','Pclass','SibSp','Parch','Fare']]\n","y = df_B['Survived']\n","\n","discrete_features = X[['Age','Fare']]\n","\n","from sklearn.feature_selection import mutual_info_classif\n","\n","#def MI_scores(X, y, feature_float64):\n","  #mi_scores = mutual_info_classif(X, y, discrete_features= True)\n","  #mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n","  #mi_scores = mi_scores.sort_values(ascending=False)\n","  #return mi_scores\n","#mi_scores = MI_scores(X, y, discrete_features)\n","\n","#def plot_mi_scores(scores):\n","    #scores = scores.sort_values(ascending=True)\n","    #width = np.arange(len(scores))\n","    #ticks = list(scores.index)\n","    #plt.barh(width, scores)\n","    #plt.yticks(width, ticks)\n","    #plt.title(\"Mutual Information Scores\")\n","\n","#plt.figure(figsize=(8, 5))\n","#plot_mi_scores(mi_scores)\n","\n","#-------------------------------------------------------------------------------------------\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(X, bins=20, kde=False,color= 'black')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(X, x = 'Fare', hue = y, bins=20, kde= True, color='black')\n","#plt.show()\n","#-------------\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(X, x= 'Age', hue= 'Sex', bins=10, kde=True, color='blue')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B[df_B['Survived']== 1], x= 'Age', hue= 'Sex', bins= 100, kde=True, color='blue')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B[df_B['Sex']== 1], x= 'Age', hue= 'Survived', bins= 100, kde=True, color='blue')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B[df_B['Sex']== 0], x= 'Age', hue= 'Survived', bins= 100, kde=True, color='blue')\n","#plt.show()\n","#------------\n","\n","df_B['Title'] = df_B['Name'].str.split(',').str[1].str.split('.').str[0]\n","df_B.drop('Name', axis=1)\n","\n","df_B['Family'] = df_B['SibSp'] + df_B['Parch']\n","\n","def alone_feature(df_B):\n","  return(df_B['Family'] == 0)\n","\n","\n","df_B['Alone'] = alone_feature(df_B)\n","#----------------------\n","\n","#plt.figure(figsize=(10,6))\n","#sns.scatterplot(df_B, x='Age', y='Fare', hue='Age', color= 'red')\n","#plt.show()\n","\n","from sklearn.cluster import KMeans                                               #258\t679 737\n","\n","df_B_New = df_B[['Age', 'Fare']]\n","df_B_New.drop(258, inplace= True)\n","df_B_New.drop(679, inplace= True)\n","df_B_New.drop(737, inplace= True)\n","\n","kmeans = KMeans(n_clusters=6)\n","df_B_New['Group_AF'] = kmeans.fit_predict(df_B_New)\n","df_B_New['Group_AF'] = df_B_New['Group_AF'].astype('category')\n","\n","#------------------------------------\n","df_B['Group'] = df_B_New['Group_AF']\n","\n","#plt.figure(figsize=(10,6))\n","#sns.scatterplot(df_B, x= 'Age', y= 'Fare', hue='Group')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.barplot(df_B, x = 'Group', y= 'Survived')\n","#plt.show()\n","\n","df_B['Group'].loc[[258, 679, 737]]\n","#258 viajou sozinha, 1 classe, sobreviveu, embk = 0 ____> 5\n","#679 viajou c familia, 1 classe, sobreviveu, embk = 0  ____> 5\n","#737 viajou sozinho, 1 classe, sobreviveu, embk = 0 _____> 4\n","\n","df_B.loc[258, 'Group'] = 5\n","df_B.loc[679, 'Group'] = 4\n","df_B.loc[737, 'Group'] = 5\n","\n","#---------------------------------------\n","X = df_B[['Sex' ,'Age','Pclass','SibSp','Parch','Fare','Group','Alone','Family']]\n","discrete_features = X[['Age','Fare']]\n","\n","def MI_scores(X, y, feature_float64):\n","  mi_scores = mutual_info_classif(X, y, discrete_features= True)\n","  mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\n","  mi_scores = mi_scores.sort_values(ascending=False)\n","  return mi_scores\n","mi_scores = MI_scores(X, y, discrete_features)\n","\n","def plot_mi_scores(scores):\n","    scores = scores.sort_values(ascending=True)\n","    width = np.arange(len(scores))\n","    ticks = list(scores.index)\n","    plt.barh(width, scores)\n","    plt.yticks(width, ticks)\n","    plt.title(\"Mutual Information Scores\")\n","\n","#plt.figure(figsize=(8, 5))\n","#plot_mi_scores(mi_scores)\n","#-------------------------------------------\n","from sklearn.decomposition import PCA\n","from sklearn.preprocessing import MinMaxScaler\n","\n","\n","scaler = MinMaxScaler()\n","df_B_final = df_B.copy()\n","data1 = scaler.fit_transform(df_B_final[['Fare', 'Age']]).mean(axis=1)\n","df_B_final['Scaler'] = data1\n","\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B_final, x= 'Age', hue= 'Survived', bins= 50, kde=True, color='blue')\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B_final, x= 'Fare', hue= 'Survived', bins= 50, kde=True, color='blue')\n","#plt.show()\n","\n","pca = PCA()   #15 e 16\n","X_new = df_B_final[['Scaler']]\n","y_new = df_B_final['Survived']\n","\n","X_new_scaled = (X_new - X_new.mean(axis=0)) / X_new.std(axis=0)\n","\n","X_pca = pca.fit_transform(X_new_scaled)\n","\n","component_names = [f\"PC{i+1}\" for i in range(X_pca.shape[1])]\n","X_pca = pd.DataFrame(X_pca, columns=component_names)\n","\n","loadings = pd.DataFrame(pca.components_.T,columns=component_names, index=X_new.columns)\n","\n","#----------------------------------------------------------\n","\n","def make_mi_scores(X, y, discrete_features):\n","    mi_scores = mutual_info_classif(X, y, discrete_features=False)\n","    mi_scores = pd.Series(mi_scores, name=\"MI Scores\", index= X_new.columns)\n","    mi_scores = mi_scores.sort_values(ascending=False)\n","    return mi_scores\n","\n","mi_scores = make_mi_scores(X_pca, y_new, discrete_features=False)\n","\n","\n","#--------------------------------------------------------------------\n","!pip install category_encoders\n","import category_encoders as ce\n","from category_encoders import MEstimateEncoder\n","\n","encoder = ce.MEstimateEncoder(cols=['Title'], m=5)\n","df_B_finalencoded = encoder.fit_transform(df_B['Title'], df_B['Survived'])\n","df_B['Title encoded'] = df_B_finalencoded\n","\n","#-------------------------------------------------------------------\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B, x='Survived', bins=10)\n","#plt.show()\n","\n","#plt.figure(figsize=(10,6))\n","#sns.histplot(df_B, x='Title', hue='Survived',kde=True, color='blue')\n","#plt.show()\n","\n","#----------------------TRAINING!!!!!---------------------------------------\n","\n","\n","df_B['Scaler'] = df_B_final['Scaler']\n","df_B.drop(['Name','PassengerId'],axis=1, inplace=True)\n","df_B['Alone'] = df_B['Alone'].astype(int)\n","\n","X = df_B[['Age','Pclass','Sex','Age','Fare','Embarked','Family','Alone','Group','Title encoded','Scaler']]\n","y = df_B['Survived']\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import accuracy_score\n","\n","train_X, val_X, train_y, val_y = train_test_split(X, y, random_state= 0, test_size=0.2)\n","forest_model = RandomForestClassifier(n_estimators= 100, n_jobs=-1, random_state=1, max_depth=6)\n","forest_model.fit(train_X, train_y)\n","df_B_predictions = forest_model.predict(val_X)\n","\n","accuracy = accuracy_score(val_y, df_B_predictions)\n","print(f'Acurácia da previsão: {accuracy}')"]}]}